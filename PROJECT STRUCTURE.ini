energy_gnn/
│
├── config/
│   ├── config.yaml              # Neo4j connection, model hyperparameters
│   └── tasks_config.yaml        # Task-specific configurations
│
├── data/
│   ├── kg_extractor.py         # Extract graph from Neo4j
│   ├── graph_builder.py        # Build PyTorch Geometric datasets
│   ├── feature_engineering.py  # Create node/edge features
│   └── data_loader.py          # Batch and temporal handling
│
├── models/
│   ├── base_gnn.py            # Base heterogeneous GNN architecture
│   ├── attention_layers.py     # Custom attention mechanisms
│   ├── temporal_layers.py      # GRU/LSTM for time series
│   ├── physics_layers.py       # Physics-informed constraints
│   └── task_heads.py           # Task-specific output heads
│
├── tasks/
│   ├── clustering.py           # Dynamic energy communities
│   ├── solar_optimization.py   # Solar placement ranking
│   ├── retrofit_targeting.py   # Building retrofit priority
│   ├── thermal_sharing.py      # Adjacent building heat exchange
│   ├── electrification.py     # Heat pump readiness
│   ├── battery_placement.py    # Optimal storage locations
│   ├── p2p_trading.py         # Energy trading pairs
│   └── congestion_predict.py   # Grid overload forecasting
│
├── training/
│   ├── multi_task_trainer.py   # Multi-objective training loop
│   ├── loss_functions.py       # Custom loss functions
│   ├── evaluation_metrics.py   # Task-specific metrics
│   └── validation.py           # Physics/economic validation
│
├── inference/
│   ├── query_processor.py      # Natural language → task mapping
│   ├── inference_engine.py     # Run trained model
│   └── kg_updater.py          # Write results back to Neo4j
│
├── utils/
│   ├── visualization.py        # Graph and result visualization
│   ├── metrics_tracker.py      # Performance monitoring
│   └── logger.py               # Logging configuration
│
└── main.py                      # Main orchestrator